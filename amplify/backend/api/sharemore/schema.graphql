type Item
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  itemSeller: String!
  itemName: String!
  description: String
  image: String
  featured: Boolean
  curPrice: Float
  endDate: String!
}

type ItemBid
  @model(subscriptions: null)
  @key(name: "byUser", fields: ["userEmail"])
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  item_id: ID!
  userEmail: String!
  date: String!
  bid_price: Float!
  item: Item @connection(fields: ["item_id"])
}
enum BidStatus {
  SUCCESS
  FAILED
}

type Mutation {
  processBid(input: ProcessBidInput!): BidStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}

input ProcessBidInput {
  id: ID!
  item_id: ID!
  bid_price: Float!
  address: String
  confirmed: Boolean!
}
